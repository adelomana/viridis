### this script reads the expression matrix generated by cufflinks and generates a PCA plot of the samples

import sys,numpy,matplotlib
from matplotlib import mlab,pyplot
from mpl_toolkits.mplot3d import Axes3D

matplotlib.use('TKAgg')

def pointDefiner(label,metaData):

    # defining the color
    if metaData[label]['light'] == 'AM' and metaData[label]['co2'] == '300':
        theColor='red'
    elif metaData[label]['light'] == 'PM' and metaData[label]['co2'] == '300':
        theColor='blue'
    elif metaData[label]['light'] == 'AM' and metaData[label]['co2'] == '1,000':
        theColor='magenta'
    elif metaData[label]['light'] == 'PM' and metaData[label]['co2'] == '1,000':
        theColor='cyan'
    else:
        print 'error a'
        sys.exit()

    # defining the marker
    if metaData[label]['epoch'] == '0':
        theMarker='o'
    elif metaData[label]['epoch'] == '1':
        theMarker='s'
    elif metaData[label]['epoch'] == '2':
        theMarker='^'
    else:
        print 'error b'
        sys.exit()

    # defining the edge
    if metaData[label]['growth'] == 'exp':
        theEdge=0.
    elif metaData[label]['growth'] == 'sta':
        theEdge=1.
    else:
        print 'error c'
        sys.exit()

    # defining the point size
    theSize=40.

    # defining the alpha
    theAlpha=0.66

    #############################################

    if metaData[label]['epoch'] == '2':
        if metaData[label]['light'] == 'PM' and metaData[label]['growth'] == 'exp':
            theSize=2000
            theEdge=0.
            theAlpha=1.
            theColor='black'
            if metaData[label]['replicate'] == 'A':
                theMarker='$A.exp.PM$'
            if metaData[label]['replicate'] == 'C':
                theMarker='$C.exp.PM$'
            

        if metaData[label]['light'] == 'AM' and metaData[label]['growth'] == 'sta':
            theSize=2000
            theEdge=0.
            theAlpha=1.
            theColor='black'
            if metaData[label]['replicate'] == 'A':
                theMarker='$A.sta.AM$'
            if metaData[label]['replicate'] == 'C':
                theMarker='$C.sta.AM$'
    #############################################

    return theColor,theMarker,theEdge,theSize,theAlpha

# 1. read the data
print 'reading the data...'
inputFile='/Volumes/omics4tb/alomana/projects/dtp/data/expression/tippingPoints/cufflinks/allSamples/genes.fpkm_table.v2.txt'
M=[]
with open(inputFile,'r') as f:
    header=f.readline()
    prelabels=header.split('\t')[1:]
    labels=[element.split('_')[0] for element in prelabels]
    f.next()
    for line in f:
        vector=line.split('\t')
        prevalues=vector[1:]
        values=[float(element) for element in prevalues]
        M.append(values)

# 1.2. reading the metadata
metaData={}
metaDataFile='/Volumes/omics4tb/alomana/projects/dtp/data/expression/tippingPoints/metadata/metadata.tsv'
with open(metaDataFile,'r') as f:
    f.next()
    for line in f:
        vector=line.split('\t')
        if vector[4] != '':
            sampleID=vector[5]
            if vector[0] != '':
                epoch=vector[0]
            growth=vector[1]
            light=vector[2]
            co2=vector[3]
            replicate=vector[4]
            metaData[sampleID]={}
            metaData[sampleID]['growth']=growth
            metaData[sampleID]['epoch']=epoch
            metaData[sampleID]['light']=light
            metaData[sampleID]['co2']=co2
            metaData[sampleID]['replicate']=replicate

print metaData

# 2. working with the data
# 2.1. transform the data into log scale
D=numpy.array(M)
F=D+1.
logF=numpy.log10(F)

# 2.2. selecting the n most varying genes
varianceThreshold=0.
geneVariances=[]
for i in range(logF.shape[0]):
    geneValues=logF[i,:]
    geneVariance=numpy.var(geneValues)
    geneVariances.append(geneVariance)
geneVariances.sort(reverse=True)
varianceThreshold=geneVariances[len(geneValues)-1] # len(geneValues)-1
#print varianceThreshold

data=[]
for i in range(logF.shape[0]):
    geneValues=logF[i,:]
    geneVariance=numpy.var(geneValues)
    if geneVariance >= varianceThreshold:
        data.append(geneValues)
G=numpy.array(data)
H=numpy.transpose(G)

'''
print H.shape
sample0=10**(H[0,:])-1.
sample2=10**(H[2,:])-1.
print 'sample0',sample0,len(sample0)
print 'sample2',sample2,len(sample2)
print header
print labels
'''

# 2. run PCA
print 'running PCA...'
results=matplotlib.mlab.PCA(H)
#print results.fracs

# 4. generate graphs
print 'building the figure...'

fig = matplotlib.pyplot.figure()
ax = fig.add_subplot(111, projection='3d')

for i in range(len(labels)):

    #if metaData[labels[i]]['co2'] == '1,000' and metaData[labels[i]]['epoch'] == '2':
        x=results.Y[i,0]
        y=results.Y[i,1]
        z=results.Y[i,2]
        theColor,theMarker,theEdge,theSize,theAlpha=pointDefiner(labels[i],metaData)
        print theMarker
        ax.scatter(x, y, z, c=theColor, marker=theMarker, s=theSize, alpha=theAlpha, lw=theEdge)

ax.set_xlabel('PCA 1 (%.3f)'%(results.fracs[0]))
ax.set_ylabel('PCA 2 (%.3f)'%(results.fracs[1]))
ax.set_zlabel('PCA 3 (%.3f)'%(results.fracs[2]))

matplotlib.pyplot.legend(loc='upper left', numpoints=1, ncol=1, fontsize=8)
matplotlib.pyplot.show()
#matplotlib.pyplot.savefig('pca.pdf')
